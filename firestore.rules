
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is newsletter owner or moderator
    function isNewsletterOwnerOrModerator(newsletterId) {
      let newsletter = get(/databases/$(database)/documents/newsletters/$(newsletterId)).data;
      return request.auth.uid in newsletter.owners || request.auth.uid in newsletter.get('moderators', []);
    }

    // Helper function to check if user is newsletter member
    function isNewsletterMember(newsletterId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return newsletterId in user.get('newsletterMemberships', {}) && user.newsletterMemberships[newsletterId].isActive == true;
    }

    // Users can read and update their own user document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId && request.resource.data.uid == userId;
    }

    // Newsletter documents
    match /newsletters/{newsletterId} {
      // Anyone can read public newsletters, members can read private ones, owners/moderators can read all
      allow read: if resource.data.get('settings', {}).get('isPublic', false) == true || 
                     isNewsletterMember(newsletterId) || 
                     isNewsletterOwnerOrModerator(newsletterId);
      
      // Only owners can update/delete newsletters
      allow update, delete: if request.auth.uid in resource.data.owners;
      
      // Authenticated users can create newsletters (must be owner)
      allow create: if request.auth.uid != null && 
                       request.auth.uid in request.resource.data.owners;
    }

    // Top-level Questions collection (new structure)
    match /questions/{questionId} {
      // Members can read questions for newsletters they belong to
      allow read: if isNewsletterMember(resource.data.newsletterId) || 
                     isNewsletterOwnerOrModerator(resource.data.newsletterId);
      
      // Owners/moderators can manage questions
      allow write: if isNewsletterOwnerOrModerator(resource.data.newsletterId) &&
                      request.resource.data.newsletterId == resource.data.newsletterId;
      
      // Create questions (must specify newsletterId and createdBy)
      allow create: if isNewsletterOwnerOrModerator(request.resource.data.newsletterId) &&
                       request.resource.data.createdBy == request.auth.uid;
    }

    // Top-level User Responses collection (new structure)
    match /userResponses/{responseId} {
      // Users can read their own responses, owners/moderators can read all responses for their newsletters
      allow read: if request.auth.uid == resource.data.userId || 
                     isNewsletterOwnerOrModerator(resource.data.newsletterId);
      
      // Users can only create/update/delete their own responses
      allow create: if request.auth.uid == request.resource.data.userId &&
                       isNewsletterMember(request.resource.data.newsletterId);
      
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Sessions collection
    match /sessions/{sessionId} {
      // Members can read sessions for newsletters they belong to
      allow read: if isNewsletterMember(resource.data.newsletterId) || 
                     isNewsletterOwnerOrModerator(resource.data.newsletterId);
      
      // Only owners/moderators can manage sessions
      allow write: if isNewsletterOwnerOrModerator(resource.data.newsletterId);
    }

    // Question Assignments collection
    match /questionAssignments/{assignmentId} {
      // Users can read their own assignments, owners can read all for their newsletters
      allow read: if request.auth.uid == resource.data.userId || 
                     isNewsletterOwnerOrModerator(resource.data.newsletterId);
      
      // Only owners/moderators can manage assignments
      allow write: if isNewsletterOwnerOrModerator(resource.data.newsletterId);
    }
  }
}
